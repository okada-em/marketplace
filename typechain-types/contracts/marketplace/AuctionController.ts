/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace AuctionRegistry {
  export type AuctionBasicStruct = {
    nftContractAddress: PromiseOrValue<string>;
    erc20Address: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    duration: PromiseOrValue<BigNumberish>;
    initialPrice: PromiseOrValue<BigNumberish>;
  };

  export type AuctionBasicStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    nftContractAddress: string;
    erc20Address: string;
    tokenId: BigNumber;
    duration: BigNumber;
    initialPrice: BigNumber;
  };
}

export declare namespace AuctionBids {
  export type AuctionBidContextStruct = {
    bidderAddress: PromiseOrValue<string>;
    price: PromiseOrValue<BigNumberish>;
  };

  export type AuctionBidContextStructOutput = [string, BigNumber] & {
    bidderAddress: string;
    price: BigNumber;
  };
}

export interface AuctionControllerInterface extends utils.Interface {
  functions: {
    "isAuctionFinished()": FunctionFragment;
    "isPaymentTokenRight(address)": FunctionFragment;
    "pushBids((address,uint256))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "isAuctionFinished"
      | "isPaymentTokenRight"
      | "pushBids"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "isAuctionFinished",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPaymentTokenRight",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "pushBids",
    values: [AuctionBids.AuctionBidContextStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "isAuctionFinished",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPaymentTokenRight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pushBids", data: BytesLike): Result;

  events: {};
}

export interface AuctionController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AuctionControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    isAuctionFinished(overrides?: CallOverrides): Promise<[boolean]>;

    isPaymentTokenRight(
      targetErc20Address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    pushBids(
      newBid: AuctionBids.AuctionBidContextStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  isAuctionFinished(overrides?: CallOverrides): Promise<boolean>;

  isPaymentTokenRight(
    targetErc20Address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  pushBids(
    newBid: AuctionBids.AuctionBidContextStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    isAuctionFinished(overrides?: CallOverrides): Promise<boolean>;

    isPaymentTokenRight(
      targetErc20Address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    pushBids(
      newBid: AuctionBids.AuctionBidContextStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    isAuctionFinished(overrides?: CallOverrides): Promise<BigNumber>;

    isPaymentTokenRight(
      targetErc20Address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pushBids(
      newBid: AuctionBids.AuctionBidContextStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    isAuctionFinished(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPaymentTokenRight(
      targetErc20Address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pushBids(
      newBid: AuctionBids.AuctionBidContextStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
