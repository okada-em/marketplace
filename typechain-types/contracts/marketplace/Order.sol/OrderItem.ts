/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace OrderItem {
  export type OrderStruct = {
    seller: PromiseOrValue<string>;
    winner: PromiseOrValue<string>;
    tokenIdx: PromiseOrValue<BigNumberish>;
    tokenId: PromiseOrValue<BigNumberish>;
    startAt: PromiseOrValue<BigNumberish>;
    erc20: PromiseOrValue<string>;
    price: PromiseOrValue<BigNumberish>;
  };

  export type OrderStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber
  ] & {
    seller: string;
    winner: string;
    tokenIdx: BigNumber;
    tokenId: BigNumber;
    startAt: BigNumber;
    erc20: string;
    price: BigNumber;
  };
}

export interface OrderItemInterface extends utils.Interface {
  functions: {
    "acceptOffer(uint256,uint256,address)": FunctionFragment;
    "buy(uint256,uint256)": FunctionFragment;
    "cancelOffer(uint256,uint256,address)": FunctionFragment;
    "cancelOrder(uint256,uint256)": FunctionFragment;
    "createOffer(uint256,uint256,address,uint256)": FunctionFragment;
    "createOrder(uint256,uint256,address,uint256)": FunctionFragment;
    "editOrder(uint256,uint256,uint256)": FunctionFragment;
    "getOrder(uint256,uint256)": FunctionFragment;
    "mpFeeRatio()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "rejectOffer(uint256,uint256,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateFee(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptOffer"
      | "buy"
      | "cancelOffer"
      | "cancelOrder"
      | "createOffer"
      | "createOrder"
      | "editOrder"
      | "getOrder"
      | "mpFeeRatio"
      | "owner"
      | "pause"
      | "paused"
      | "rejectOffer"
      | "renounceOwnership"
      | "transferOwnership"
      | "unpause"
      | "updateFee"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptOffer",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOffer",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createOffer",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createOrder",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "editOrder",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrder",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mpFeeRatio",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rejectOffer",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "editOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mpFeeRatio", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rejectOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateFee", data: BytesLike): Result;

  events: {
    "OfferAccepted(uint256,uint256,address,uint256)": EventFragment;
    "OfferCanceled(uint256,uint256,address,uint256)": EventFragment;
    "OfferCreated(uint256,uint256,address,uint256)": EventFragment;
    "OfferRejected(uint256,uint256,address)": EventFragment;
    "OrderBought(address,uint256,address,address,address,uint256)": EventFragment;
    "OrderCanceled(uint256,uint256)": EventFragment;
    "OrderCreated(tuple)": EventFragment;
    "OrderEdited(tuple)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OfferAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferRejected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderBought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderEdited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface OfferAcceptedEventObject {
  tokenIdx: BigNumber;
  tokenId: BigNumber;
  offer: string;
  price: BigNumber;
}
export type OfferAcceptedEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber],
  OfferAcceptedEventObject
>;

export type OfferAcceptedEventFilter = TypedEventFilter<OfferAcceptedEvent>;

export interface OfferCanceledEventObject {
  tokenIdx: BigNumber;
  tokenId: BigNumber;
  offer: string;
  price: BigNumber;
}
export type OfferCanceledEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber],
  OfferCanceledEventObject
>;

export type OfferCanceledEventFilter = TypedEventFilter<OfferCanceledEvent>;

export interface OfferCreatedEventObject {
  tokenIdx: BigNumber;
  tokenId: BigNumber;
  offer: string;
  price: BigNumber;
}
export type OfferCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber],
  OfferCreatedEventObject
>;

export type OfferCreatedEventFilter = TypedEventFilter<OfferCreatedEvent>;

export interface OfferRejectedEventObject {
  tokenIdx: BigNumber;
  tokenId: BigNumber;
  proposer: string;
}
export type OfferRejectedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  OfferRejectedEventObject
>;

export type OfferRejectedEventFilter = TypedEventFilter<OfferRejectedEvent>;

export interface OrderBoughtEventObject {
  erc721: string;
  tokenId: BigNumber;
  seller: string;
  buyer: string;
  erc20: string;
  price: BigNumber;
}
export type OrderBoughtEvent = TypedEvent<
  [string, BigNumber, string, string, string, BigNumber],
  OrderBoughtEventObject
>;

export type OrderBoughtEventFilter = TypedEventFilter<OrderBoughtEvent>;

export interface OrderCanceledEventObject {
  tokenIdx: BigNumber;
  tokenId: BigNumber;
}
export type OrderCanceledEvent = TypedEvent<
  [BigNumber, BigNumber],
  OrderCanceledEventObject
>;

export type OrderCanceledEventFilter = TypedEventFilter<OrderCanceledEvent>;

export interface OrderCreatedEventObject {
  order: OrderItem.OrderStructOutput;
}
export type OrderCreatedEvent = TypedEvent<
  [OrderItem.OrderStructOutput],
  OrderCreatedEventObject
>;

export type OrderCreatedEventFilter = TypedEventFilter<OrderCreatedEvent>;

export interface OrderEditedEventObject {
  order: OrderItem.OrderStructOutput;
}
export type OrderEditedEvent = TypedEvent<
  [OrderItem.OrderStructOutput],
  OrderEditedEventObject
>;

export type OrderEditedEventFilter = TypedEventFilter<OrderEditedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface OrderItem extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OrderItemInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOffer(
      tokenIdx: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      proposer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buy(
      tokenIdx: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelOffer(
      tokenIdx: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      proposer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelOrder(
      tokenIdx: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createOffer(
      tokenIdx: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createOrder(
      tokenIdx: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    editOrder(
      tokenIdx: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getOrder(
      tokenIdx: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[OrderItem.OrderStructOutput]>;

    mpFeeRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    rejectOffer(
      tokenIdx: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      proposer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateFee(
      updated: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptOffer(
    tokenIdx: PromiseOrValue<BigNumberish>,
    tokenId: PromiseOrValue<BigNumberish>,
    proposer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buy(
    tokenIdx: PromiseOrValue<BigNumberish>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelOffer(
    tokenIdx: PromiseOrValue<BigNumberish>,
    tokenId: PromiseOrValue<BigNumberish>,
    proposer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelOrder(
    tokenIdx: PromiseOrValue<BigNumberish>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createOffer(
    tokenIdx: PromiseOrValue<BigNumberish>,
    tokenId: PromiseOrValue<BigNumberish>,
    erc20: PromiseOrValue<string>,
    price: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createOrder(
    tokenIdx: PromiseOrValue<BigNumberish>,
    tokenId: PromiseOrValue<BigNumberish>,
    erc20: PromiseOrValue<string>,
    price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  editOrder(
    tokenIdx: PromiseOrValue<BigNumberish>,
    tokenId: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getOrder(
    tokenIdx: PromiseOrValue<BigNumberish>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<OrderItem.OrderStructOutput>;

  mpFeeRatio(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  rejectOffer(
    tokenIdx: PromiseOrValue<BigNumberish>,
    tokenId: PromiseOrValue<BigNumberish>,
    proposer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateFee(
    updated: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOffer(
      tokenIdx: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      proposer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    buy(
      tokenIdx: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelOffer(
      tokenIdx: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      proposer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelOrder(
      tokenIdx: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createOffer(
      tokenIdx: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createOrder(
      tokenIdx: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    editOrder(
      tokenIdx: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getOrder(
      tokenIdx: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<OrderItem.OrderStructOutput>;

    mpFeeRatio(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    rejectOffer(
      tokenIdx: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      proposer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateFee(
      updated: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OfferAccepted(uint256,uint256,address,uint256)"(
      tokenIdx?: null,
      tokenId?: null,
      offer?: null,
      price?: null
    ): OfferAcceptedEventFilter;
    OfferAccepted(
      tokenIdx?: null,
      tokenId?: null,
      offer?: null,
      price?: null
    ): OfferAcceptedEventFilter;

    "OfferCanceled(uint256,uint256,address,uint256)"(
      tokenIdx?: null,
      tokenId?: null,
      offer?: null,
      price?: null
    ): OfferCanceledEventFilter;
    OfferCanceled(
      tokenIdx?: null,
      tokenId?: null,
      offer?: null,
      price?: null
    ): OfferCanceledEventFilter;

    "OfferCreated(uint256,uint256,address,uint256)"(
      tokenIdx?: null,
      tokenId?: null,
      offer?: null,
      price?: null
    ): OfferCreatedEventFilter;
    OfferCreated(
      tokenIdx?: null,
      tokenId?: null,
      offer?: null,
      price?: null
    ): OfferCreatedEventFilter;

    "OfferRejected(uint256,uint256,address)"(
      tokenIdx?: null,
      tokenId?: null,
      proposer?: null
    ): OfferRejectedEventFilter;
    OfferRejected(
      tokenIdx?: null,
      tokenId?: null,
      proposer?: null
    ): OfferRejectedEventFilter;

    "OrderBought(address,uint256,address,address,address,uint256)"(
      erc721?: null,
      tokenId?: null,
      seller?: null,
      buyer?: null,
      erc20?: null,
      price?: null
    ): OrderBoughtEventFilter;
    OrderBought(
      erc721?: null,
      tokenId?: null,
      seller?: null,
      buyer?: null,
      erc20?: null,
      price?: null
    ): OrderBoughtEventFilter;

    "OrderCanceled(uint256,uint256)"(
      tokenIdx?: null,
      tokenId?: null
    ): OrderCanceledEventFilter;
    OrderCanceled(tokenIdx?: null, tokenId?: null): OrderCanceledEventFilter;

    "OrderCreated(tuple)"(order?: null): OrderCreatedEventFilter;
    OrderCreated(order?: null): OrderCreatedEventFilter;

    "OrderEdited(tuple)"(order?: null): OrderEditedEventFilter;
    OrderEdited(order?: null): OrderEditedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    acceptOffer(
      tokenIdx: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      proposer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buy(
      tokenIdx: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelOffer(
      tokenIdx: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      proposer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelOrder(
      tokenIdx: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createOffer(
      tokenIdx: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createOrder(
      tokenIdx: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    editOrder(
      tokenIdx: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getOrder(
      tokenIdx: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mpFeeRatio(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    rejectOffer(
      tokenIdx: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      proposer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateFee(
      updated: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOffer(
      tokenIdx: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      proposer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buy(
      tokenIdx: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelOffer(
      tokenIdx: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      proposer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelOrder(
      tokenIdx: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createOffer(
      tokenIdx: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createOrder(
      tokenIdx: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    editOrder(
      tokenIdx: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getOrder(
      tokenIdx: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mpFeeRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rejectOffer(
      tokenIdx: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      proposer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateFee(
      updated: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
